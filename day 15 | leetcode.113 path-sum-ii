link: https://leetcode.cn/problems/path-sum-ii/description/

这次尝试使用回溯的思想，但没有实践出来。
精髓是，到一个节点，先把他加进path，如果符合终止条件，记录，返回上一层，然后把这个节点删除！！！！！！（无论这个节点符不符合要求（加没加进最终result），返回上一层都要去掉这个点）然后继续返回那层的操作（往右找）。


这里path是一个linkedlist，result是一群linkedlist组成的arraylist，也就是最后输出的路径集合。
path始终只有一个，在遍历的过程中往左右试试（加左右儿子），（子节点也就是子树，因为递归不断往下）
到头了不行就不把当前path加进result，直接往上一层的节点return，删除当前叶子结点（也可能往上回要删除非叶子hh，因为当前节点，也是上一层节点的左或右！！当前节点执行完左右递归了，也就等于上一层节点的左或右执行完了，也要被remove）

这个方法传递参数的方式要注意，其实targetsum一直都没变，因为传进去的是targetsum-val，而不是直接传targetsum。
换句话说，每个递归函数（父和子）的targetsum是独立的，互不影响。
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res; // 非空判断
        List<Integer> path = new LinkedList<>();
        preorderdfs(root, targetSum, res, path);
        return res;
    }

    public void preorderdfs(TreeNode root, int targetSum, List<List<Integer>> res, List<Integer> path) {
        path.add(root.val);    //这个是每层的操作，把当前节点先加进path。
        // 遇到了叶子节点
        if (root.left == null && root.right == null) {
            // 找到了和为 targetSum 的路径
            if (targetSum - root.val == 0) {
                res.add(new ArrayList<>(path));     //如果符合要求，直接记录path进result，再返回。不符合的话，不进result，直接返回。返回后无论如何，path中还带着这个叶子节点，所以要remove了再找其他。
            }
            return; // 无论和是不是targetSum，都要返回
        }
        if (root.left != null) {                   //中左右递归，结束中（当前操作包括add自己进path，不包括自己是终止节点），进左和右递归。先往左看看，无论符不符合要求，return回来都要删掉刚进去的左节点，然后再进右！！
            preorderdfs(root.left, targetSum - root.val, res, path);
            path.remove(path.size() - 1); // 回溯，这一步最关键，进行这一步之前，说明当前节点的左子节点（因为递归从下返回，也就等同于左子树遍历完了）被遍历过了，且左子节点还在path中，得把他remove才能看右子节点（递归进右子树）
        }
        if (root.right != null) {                 //这里表示，当前节点的左子树遍历完了，该去右子树（子节点）看看了。同样，每个节点return回来，都要从path中移除这个节点。
            preorderdfs(root.right, targetSum - root.val, res, path);
            path.remove(path.size() - 1); // 回溯，同左回溯。
        }
    }
}

我为了深入理解回溯，更改了一下targetsum的参数传递方式。
在这个代码中，我选择进入节点就直接更新targetsum，同时直接传targetsum。
而不是像上面一样，（传递参数targetsum-root.val）
因此相应的，在返回上一层的时候，需要把targetsum加回当前节点的值。保证程序返回上一层之前，targetsum加回去就行。（注意多个return位置）
可以说更好地理解了回溯的思想！！！！！真棒  xxxxxxx

我不棒qwq，其实代码里面把targetsum不回溯也没问题，因为方法传递的基本数据类型其实是复制品，子节点改变了targetsum，只属于他自己。不会影响父节点的targetsum！！！
反而path作为linkedlist是引用数据类型，传递的是地址，所以需要回溯！！！！！
这回才是真棒！！！！！！！



在Java中，基本数据类型（如int）作为参数传递给方法时，传递的是值的副本，而不是变量本身。
因此，当你在递归调用中修改参数的值时，只会修改该方法内部的副本，不会影响到调用该方法的地方的原始值。
这就是为什么即使你在子节点的递归调用中修改了 targetsum 的值，但是并不会影响到父节点的 targetsum 的原因。

class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        if (root == null) return res; // 非空判断
        List<Integer> path = new LinkedList<>();
        preorderdfs(root, targetSum, res, path);
        return res;
    }

    public void preorderdfs(TreeNode root, int targetSum, List<List<Integer>> res, List<Integer> path) {
        path.add(root.val);
        targetSum-=root.val;                                  //这里改了
        // 遇到了叶子节点
        if (root.left == null && root.right == null) {
            // 找到了和为 targetSum 的路径
            if (targetSum==0) {                               //进来就减过val了，所以直接和0比。
                res.add(new ArrayList<>(path));
            }
//     targetSum += root.val;                            //这样targetsum也需要回溯！！！，每个return之前都要保证回溯了。（没有用！因为基本数据类型穿的是值，父子不影响）
            return; // 如果和不为 targetSum，返回
        }
        if (root.left != null) {
            preorderdfs(root.left, targetSum, res, path);     //传递参数也相应的改了
            path.remove(path.size() - 1); // 回溯
        }
        if (root.right != null) {
            preorderdfs(root.right, targetSum, res, path);
            path.remove(path.size() - 1); // 回溯     
        }
// targetSum += root.val;                                //如果不是子节点提前return回溯。（也没用，同上，targetsum是int参数，子节点的递归函数改变targetsum只影响他自己的函数，不影响他爹的targetsum）
    }
}
