link: https://leetcode.cn/problems/non-decreasing-subsequences/
这道题很多坑，我都掉进去了qwq。
首先是去重（要求子集不能相同，还是同一层不同，树枝内可以相同）但不能排序，因为要求递增子序列，排序就乱套了。
这里可以用hashset记录层内是否出现过

class Solution {
    List<List<Integer>> result = new ArrayList<>();
    List<Integer> path = new ArrayList<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        backTracking(nums, 0);
        return result;
    }
    private void backTracking(int[] nums, int startIndex){
        if(path.size()>= 2){
            result.add(new ArrayList<>(path));    
        }        
        HashSet<Integer> hs = new HashSet<>();
        for(int i = startIndex; i < nums.length; i++){
            if(!path.isEmpty() && path.get(path.size() -1 ) > nums[i] || hs.contains(nums[i]))
                continue;
                
            hs.add(nums[i]);
            path.add(nums[i]);
            backTracking(nums, i + 1);
            path.remove(path.size() - 1);
        }
    }
}
