link: https://leetcode.cn/problems/symmetric-tree/description/

这道题不会，思路是递归后序遍历，因为要比较节点的内外儿子是否相同，都相同才能返回true给上一层。
排除终止条件后，剩下的情况是俩节点val相同，这时候进入真正的递归处理，看俩节点的外，内，再返回是否俩子树相同。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
 /**
     * 递归法
     */
        return compare(root.left, root.right);
    }
    
    private boolean compare(TreeNode left, TreeNode right) {

        if (left == null && right != null) {
            return false;
        }
        if (left != null && right == null) {
            return false;
        }

        if (left == null && right == null) {
            return true;
        }
        if (left.val != right.val) {
            return false;
        }
        // 此时只剩下当前左右节点相同这个情况，进入递归操作。比较两个节点的外侧子节点。
        boolean compareOutside = compare(left.left, right.right);
        // 比较内侧
        boolean compareInside = compare(left.right, right.left);
        //两节点的内外节点（子树）都相同，才返回true给上一层递归。
        return compareOutside && compareInside;
    }
}
