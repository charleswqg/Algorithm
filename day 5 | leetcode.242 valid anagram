link: https://leetcode.cn/problems/valid-anagram/


今天进入hash，不太熟悉，或者说忘了很多。

HashSet是Java中常用的集合实现之一，它基于哈希表实现，提供了一系列方法用于管理集合中的元素。以下是HashSet常见的方法：

HashSet<Integer> set=new HashSet<>();

1. `add(element)`: 将指定的元素添加到HashSet中。如果HashSet中已经存在相同的元素，则添加操作失败，返回false。

2. `remove(element)`: 从HashSet中删除指定的元素。

3. `contains(element)`: 判断HashSet中是否包含指定的元素。

4. `size()`: 返回HashSet中元素的数量。

5. `isEmpty()`: 判断HashSet是否为空，即是否包含元素。

6. `clear()`: 清空HashSet，删除所有的元素。

7. `iterator()`: 返回HashSet的迭代器，可以用于遍历集合中的元素。

HashSet没有提供按索引访问元素的方法，因为HashSet中的元素是无序的，没有固定的索引顺序。HashSet的实现是基于哈希表的，它的元素存储在哈希桶中，因此可以实现常数时间的添加、删除和查找操作。

通过这些方法，可以方便地对HashSet进行元素的添加、删除、查找等操作，是处理不重复元素集合的常用工具。


HashMap是Java中常用的键值对映射数据结构，它实现了Map接口，提供了一系列方法来操作键值对。以下是HashMap常见的方法：
HashMap<Character, Integer> map=new HashMap<>();

1. `put(key, value)`: 将指定的键-值对映射插入到HashMap中。如果HashMap中已经存在相同的键，则新的值将取代旧的值，并且返回旧的值。如果HashMap中没有该键，则返回null。

2. `get(key)`: 返回指定键所映射的值，如果该键不存在，则返回null。

3. `remove(key)`: 删除HashMap中指定键的映射关系，并返回该键映射的值。如果HashMap中没有该键，则返回null。

4. `containsKey(key)`: 判断HashMap中是否包含指定的键。

5. `containsValue(value)`: 判断HashMap中是否包含指定的值。

6. `size()`: 返回HashMap中键值对的数量。

7. `isEmpty()`: 判断HashMap是否为空，即是否包含键值对。

8. `clear()`: 清空HashMap，删除所有的键值对。

9. `keySet()`: 返回HashMap中所有键的集合。

10. `values()`: 返回HashMap中所有值的集合。

11. `entrySet()`: 返回HashMap中所有键值对的集合，每个元素都是一个Map.Entry对象，包含一个键和对应的值。

这些方法可以用来对HashMap进行常见的增删改查操作，并且提供了丰富的功能来处理键值对数据。通过灵活地使用这些方法，可以高效地操作HashMap，满足各种应用场景的需求。


先来个暴力算法，两层for一个一个找，外层元素进内层找，找到了visited，最后全visited就1否则0.

class Solution {
    public boolean isAnagram(String s, String t) {
        if(s.length()!=t.length()){
            return false;
        }
        int [] isVisted=new int [s.length()];
        for(int i=0;i<s.length();i++){
            for(int j=0;j<t.length();j++){
                if(s.charAt(i)==t.charAt(j) && isVisted[j]==0){
                    isVisted[j]=1;
                }
            }
        }
        int flag=0;
        for(int k=0;k<isVisted.length;k++){
            if(isVisted[k]==0){
                return false;
            }
        }
        return true;
    }
}

然后想到了hash相关，因为问题是查看元素有没有出现过，出现几次。
hash可以用数组（下标key，存储的值value，也属于key唯一value不唯一），set（每个元素就是key，没value，不许有重复元素）和map（key，value键值对，hashmap中，key唯一value不唯一）实现。
这个就用数组了。record数组有26个元素，想要对应26个字母a-z。那如何把数组下标和字母对应呢。字母是char，可以用减法算当前字母和a的差值，a-a=0;b-a=1...
所以key就是数组下标（哪个字母），value就是数组的值（这个字母的出现次数）。
存储进去s的字母和出现次数后，再用t遍历（只不过value--）。
如果最后record数组有值不为0，说明s字符串有这个字母，t字符串出现这个字母的次数少了，所以不匹配！
如果record全是0，说明s每次出现的字母个数，都被t减回去了，完全匹配！
class Solution {
    public boolean isAnagram(String s, String t) {
        int [] record=new int[26];
        for(int i=0;i<s.length();i++){
            record[s.charAt(i)-'a']++;
        }
        for(int j=0;j<t.length();j++){
            record[t.charAt(j)-'a']--;
        }

        for(int count: record){
            if(count!=0){
                return false;
            }
        }
        return true;
    }
}

最后chat教我hashmap，key是字母，value是出现次数。对应数组下标是字母（与a的差），值是出现次数。

import java.util.HashMap;

class Solution {
    public boolean isAnagram(String s, String t) {
        if (s.length() != t.length()) {
            return false;
        }
        
        // 创建HashMap来统计字符串s中每个字符出现的次数
        HashMap<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {       //这里把字符串转化为字符数组遍历。
            map.put(c, map.getOrDefault(c, 0) + 1);    

//map.getOrDefault(c, 0) 等同于 
//if (map.containsKey(c)) {
//    map.put(c, map.get(c) + 1);
//} else {
//    map.put(c, 1);
//}

        }
        
        // 遍历字符串t，对每个字符的出现次数进行减操作
        for (char c : t.toCharArray()) {
            if (!map.containsKey(c)) {
                return false; // 如果t中的字符不在map中，则说明不是字母异位词
            }
            map.put(c, map.get(c) - 1);
        }
        
        // 检查HashMap中的值是否全部为0
        for (int count : map.values()) {
            if (count != 0) {
                return false;
            }
        }
        
        return true;
    }
}

