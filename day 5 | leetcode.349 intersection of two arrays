link: https://leetcode.cn/problems/intersection-of-two-arrays/


这道题没想出来。。。其实俩hashset就解决了。
第一个hashset存第一个数组的元素，然后遍历第二个数组，如果当前元素在第一个hashset中出现（contains），说明在第一个数组中出现，
此时把它放进第二个hashset，作为结果。最后把第二个hashset转换为数组输出。

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        if(nums1.length==0||nums2.length==0||nums1==null||nums2==null){
            return null;
        }
        HashSet<Integer> setA=new HashSet<>();
        HashSet<Integer> setB=new HashSet<>();
        for(int i: nums1){
            setA.add(i);
        } 
        for(int j: nums2){
            if(setA.contains(j)){
                setB.add(j);
            }
        }  
        int arr[]=new int[setB.size()];
        int m=0;
        for(int n: setB){
            arr[m++]=n;
        }    
        return arr;
    }
}

也可以用hash数组，因为题目里说数组中元素最大1000，所以可以把输入数组中（nums1，nums2）的元素值看为key（hash数组下标），输入数组中元素出现次数看为value（hash数组值）
最后两个hash数组在某个下标的值同时>0，表示该元素在俩数组都出现了。

class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        int[] hash1 = new int[1002];
        int[] hash2 = new int[1002];
        for(int i : nums1)
            hash1[i]++;
        for(int i : nums2)
            hash2[i]++;
        List<Integer> resList = new ArrayList<>();
        for(int i = 0; i < 1002; i++)
            if(hash1[i] > 0 && hash2[i] > 0)
                resList.add(i);
        int index = 0;
        int res[] = new int[resList.size()];
        for(int i : resList)
            res[index++] = i;
        return res;
    }
}
