link: https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons/description/

这道题没想出来，也要把左边界从小到大排序，然后关键是找重合气球的最小右边界。
比如i和i-1俩气球，i的左边界如果大于i-1的右边界，说明俩气球不能一箭射爆，所以需要多一只。
如果<=，说明有重合部分，可以不用多一箭，但要更新i这个气球的右边界为，i-1的右和i的右的最小值。
因为此时i和i-1共用一箭，但i++后，要看能否一箭同时射爆i+1，i和i-1，所以相当于i+1的左边界和i更新后的右边界能否重合，i更新后的右边界，就是i-1的右和i的右这两个之间更小的那个（i+1的左边界要比i和i-1的右边界最小的，还要小，才能重合）。
所以要更新i的右边界为他和i-1右边界的公共最小，方便记录和下次循环的比较。

  
/**
 * 时间复杂度 : O(NlogN)  排序需要 O(NlogN) 的复杂度
 * 空间复杂度 : O(logN) java所使用的内置函数用的是快速排序需要 logN 的空间
 */
class Solution {
    public int findMinArrowShots(int[][] points) {
        // 根据气球直径的开始坐标从小到大排序
        // 使用Integer内置比较方法，不会溢出
        Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));

        int count = 1;  // points 不为空至少需要一支箭
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > points[i - 1][1]) {  // 气球i和气球i-1不挨着，注意这里不是>=
                count++; // 需要一支箭
            } else {  // 气球i和气球i-1挨着
                points[i][1] = Math.min(points[i][1], points[i - 1][1]); // 更新重叠气球最小右边界，用i的右边界记录。
            }
        }
        return count;
    }
}
