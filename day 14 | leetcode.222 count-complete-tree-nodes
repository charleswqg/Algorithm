link: https://leetcode.cn/problems/count-complete-tree-nodes/description/

这道题有三种解法，我会前两种。

第一：后序递归，左右中（操作是return左右节点数量之和+1）

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

 
class Solution {
    public int countNodes(TreeNode root) {
        if(root==null){
            return 0;
        }
        int sum;
        sum=countNodes(root.left)+countNodes(root.right)+1;
        return sum;

    }
}

第二种是层序遍历，操作是内层循环每次poll出的时候sum++

class Solution {
    // 迭代法
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        int result = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            while (size -- > 0) {
                TreeNode cur = queue.poll();
                result++;
                if (cur.left != null) queue.offer(cur.left);
                if (cur.right != null) queue.offer(cur.right);
            }
        }
        return result;
    }
}


最后一种比较特别，利用了完全二叉树的性质。完全二叉树是除了最后一层有可能左满右不满，上面全满。
如果完全二叉树的一个节点的左右子树高度相同，那么这个节点和他的子节点们就形成了一个满二叉树，节点个数位2^n-1.
利用这个性质，还是左右中后序递归。终止条件是左右子树深度相同（返回节点个数）或节点为空（到叶子的儿子）。
逻辑操作是左右子树节点个数+1（左右加自己），返回上一层递归。


class Solution {
    /**
     * 针对完全二叉树的解法
     *
     * 满二叉树的结点数为：2^depth - 1
     */
    public int countNodes(TreeNode root) {
        if (root == null) return 0;
        TreeNode left = root.left;
        TreeNode right = root.right;
        int leftDepth = 0, rightDepth = 0; // 这里初始为0是有目的的，为了下面求指数方便
        while (left != null) {  // 求左子树深度
            left = left.left;
            leftDepth++;
        }
        while (right != null) { // 求右子树深度
            right = right.right;
            rightDepth++;
        }
        if (leftDepth == rightDepth) {
            return (2 << leftDepth) - 1; // 注意(2<<1) 相当于2^2，所以leftDepth初始为0
        }
        return countNodes(root.left) + countNodes(root.right) + 1;
    }
}
