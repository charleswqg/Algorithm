link: https://leetcode.cn/problems/sliding-window-maximum/description/

我自己只会暴力解法如下，两个for解决问题但超时。

class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int result=-10000;
        if(k>nums.length){
            Arrays.sort(nums);
            result=nums[nums.length];
            return new int[]{result};
        }
        else{
            int[] arr=new int[nums.length-k+1];
            for(int i=0;i<=nums.length-k;i++){
                for(int j=i;j<i+k;j++){
                    if(nums[j]>=result){
                        result=nums[j];
                    }
                }
                arr[i]=result;
            }
             return arr;
        }
    }
}

正确解是单调队列，说实话我完全没接触过，没想到hh。
思想是，没必要把窗口内所有元素放进队列，只把有可能成为最大值的放进去。
精髓是，保证队列右侧（队列头）是数组靠左（先进来的，也会在循环过程中先出去）且更大的元素；而他左边的元素，相对晚进来且相对较小。这样能让队列始终头是最大且单调递减。

把前k个元素（下标0到k-1）加进队列后（按要求add）（这就是第一个窗口），从i=k开始循环。

每次可能出去一个pop（当前遍历到的元素下标i-循环的开始下标k，得到了往右走几个进队列，相应左边就出队列），只有通过当前元素找到的出队列元素（下标i-k）等于队列最右端（头）元素，才让他出。（这代表队列头元素已经出窗口了，不能再是最大值了。）
否则不管。（不管的元素其实是在头之前进队列的，且比头小，头进入时（add）被头弹出去了，所以不可能是结果，队列里也找不到他们）

然后进来一个当前元素push（add），加到队列左端，表示后来的。
（且从左开始不断弹出比他小的，弹出的元素比他先来（先进队列），且比他小。也就意味着本来弹出去的元素也一定比新进来的元素先出去。
他们出队列一定比新元素早，而且因为新元素比他们大，只要新add的元素在，他们就不可能是最大，新元素一定比他们在队列里待得更长久。所以有了新元素，永远轮不到他们最大。他们废了，直接滚就行。
同时保证单调，最后他右边的元素一定比他先来且比他大）

最后返回单调队列头元素peek（最大值），然后继续循环。

push和pop顺序没影响，就算先push，也会把需要pop的（比新进来元素小的）先pop掉。



//自定义数组
class MyQueue {
    Deque<Integer> deque = new LinkedList<>();
    //弹出元素时，比较当前要弹出的数值是否等于队列出口的数值，如果相等则弹出
    //同时判断队列当前是否为空
    void poll(int val) {
        if (!deque.isEmpty() && val == deque.peek()) {
            deque.poll();
        }
    }
    //添加元素时，如果要添加的元素大于入口处的元素，就将入口元素弹出
    //保证队列元素单调递减
    //比如此时队列元素3,1，2将要入队，比1大，所以1弹出，此时队列：3,2
    void add(int val) {
        while (!deque.isEmpty() && val > deque.getLast()) {
            deque.removeLast();
        }
        deque.add(val);
    }
    //队列队顶元素始终为最大值
    int peek() {
        return deque.peek();
    }
}


class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        if (nums.length == 1) {
            return nums;
        }
        int len = nums.length - k + 1;
        //存放结果元素的数组
        int[] res = new int[len];
        int num = 0;
        //自定义队列
        MyQueue myQueue = new MyQueue();
        //先将前k的元素放入队列
        for (int i = 0; i < k; i++) {
            myQueue.add(nums[i]);
        }
        res[num++] = myQueue.peek();
        for (int i = k; i < nums.length; i++) {
            //滑动窗口移除最前面的元素，移除是判断该元素是否放入队列
            myQueue.poll(nums[i - k]);
            //滑动窗口加入最后面的元素
            myQueue.add(nums[i]);
            //记录对应的最大值
            res[num++] = myQueue.peek();
        }
        return res;
    }
}

