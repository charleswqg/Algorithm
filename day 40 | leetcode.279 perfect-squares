link: https://leetcode.cn/problems/perfect-squares/description/

这道题思路有了。类似零钱，也是完全背包。dp表示和为j的情况下（背包容量），最少几个物品能装满。
递推公式不变，dp[j] = Math.min(dp[j], dp[j - i * i] + 1); 只不过物品重量用i方表示了。
初始化都为最大，因为要不断遍历减小，dp[0]=0（从1的平方开始算）。


class Solution {
    //可以先遍历物品, 再遍历背包
    public int numSquares(int n) {
        int max = Integer.MAX_VALUE;
        int[] dp = new int[n + 1];
        //初始化
        for (int j = 0; j <= n; j++) {
            dp[j] = max;
        }
        //当和为0时，组合的个数为0
        dp[0] = 0;

        // 遍历物品
        for (int i = 1; i * i <= n; i++) {
            // 遍历背包
            for (int j = i * i; j <= n; j++) {
                dp[j] = Math.min(dp[j], dp[j - i * i] + 1);
            }
        }
        return dp[n];
    }
}
