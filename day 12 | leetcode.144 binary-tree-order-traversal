link: https://leetcode.cn/problems/binary-tree-preorder-traversal/description/

link: https://leetcode.cn/problems/binary-tree-inorder-traversal/description/

link: https://leetcode.cn/problems/binary-tree-postorder-traversal/description/

写出来了，前序遍历中左右。中序遍历左中右，后序遍历左右中。所谓的前中后指的是，输出当前节点（加到ArrayList时的相对位置）和进入左右递归的相对顺序（中表示输出当前节点）。
递归的时候注意三点要想清楚，首先是形参和返回值，然后是终止条件，最后是每次要干啥（栈）。

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> list=new ArrayList<>();
        pre(root,list);
        return list;
    }

前序
    
    public void pre(TreeNode cur, List<Integer> list){
        if(cur==null){
            return;
        }
        else{
            list.add(cur.val);
            pre(cur.left,list);
            pre(cur.right,list);
        }
    }
}

中序

    public void in(TreeNode cur, List<Integer> list){
        if(cur==null){
            return;
        }
        else{
            in(cur.left,list);
            list.add(cur.val);
            in(cur.right,list);
        }
    }

    
后序
    public void post(TreeNode cur, List<Integer> list){
        if(cur==null){
            return;
        }
        else{
            post(cur.left,list);
            post(cur.right,list);
            list.add(cur.val);
        }
    }



也可以用stack进行迭代遍历，因为递归的实质就是压栈。

前序中左右，压栈顺序是中右左（保证先遍历到左）。
// 前序遍历顺序：中-左-右，入栈顺序：中-右-左
class Solution {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null){
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()){
            TreeNode node = stack.pop();            //（pop）遍历到的节点，可以直接加到list里面输出，很方便。
            result.add(node.val);
            if (node.right != null){
                stack.push(node.right);
            }
            if (node.left != null){
                stack.push(node.left);
            }
        }
        return result;
    }
}

后序是左右中，需要一点数组反转的小技巧。如果是先中，我们可以一边遍历一边输出记录。所以可以用中右左输出遍历，然后数组反转输出结果。那么压栈顺序就是中左右。
只需要在前序的基础上调整顺序就行。
// 后序遍历顺序 左-右-中 入栈顺序：中-左-右 出栈顺序：中-右-左， 最后翻转结果
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null){
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while (!stack.isEmpty()){
            TreeNode node = stack.pop();
            result.add(node.val);
            if (node.left != null){
                stack.push(node.left);
            }
            if (node.right != null){
                stack.push(node.right);
            }
        }
        Collections.reverse(result);    //反转list输出
        return result;
    }
}


中序很抽象，因为左中右不能反转得到（最好是先中，保证遍历和输出同步进行），只能重新写。
关键是，先让cur一直往左到头，然后如果到叶子节点的子（null），返回（pop）上一层节点（叶子）并输出（add），然后向右。
此时cur是叶子的右空节点，再pop（叶子的父节点），就不断中右返回去了。

// 中序遍历顺序: 左-中-右 入栈顺序： 左-右
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null){
            return result;
        }
        Stack<TreeNode> stack = new Stack<>();
        TreeNode cur = root;
        while (cur != null || !stack.isEmpty()){    //这里不是且，是或！！！
           if (cur != null){
               stack.push(cur);
               cur = cur.left;
           }else{
               cur = stack.pop();
               result.add(cur.val);
               cur = cur.right;
           }
        }
        return result;
    }
}





